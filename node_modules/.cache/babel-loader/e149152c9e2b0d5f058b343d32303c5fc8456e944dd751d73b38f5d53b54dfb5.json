{"ast":null,"code":"var _jsxFileName = \"/Users/teo/Documents/REACT TASKS + PROJECTS/HOPE Application test/ToDo/todo-app/todo-app/src/components/TodoContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from '../styles/todo-container.module.css';\nimport Input from './Input';\nimport TodoItem from './TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContainer = props => {\n  _s();\n  // A temporary list of tasks\n  const tasksData = [{\n    id: 1,\n    title: 'Complete homework',\n    completed: false\n  }, {\n    id: 2,\n    title: 'Go grocery shopping',\n    completed: false\n  }, {\n    id: 3,\n    title: 'Walk the dog',\n    completed: true\n  }, {\n    id: 4,\n    title: 'Read a book',\n    completed: false\n  }];\n\n  // Storing the state into a tasks variable to hold the initial hardcoded tasks\n  const [tasks, setTasks] = useState(tasksData);\n\n  // Function to add new task to session storage from user input\n  const addTask = newTask => {\n    if (newTask.trim() === '') {\n      alert('You must enter a title for the new task');\n      return; // Don't add empty tasks\n    }\n\n    const newTaskObj = {\n      id: Date.now(),\n      title: newTask,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTaskObj]);\n    const updatedTasks = [...tasks, newTaskObj];\n    // Set session storage and update with the new task\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(TodoItem, {\n      title: task.title,\n      completed: task.completed\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 14\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoContainer, \"9eCIs32UyKGxrqBhUP5cX9x+EWA=\");\n_c = TodoContainer;\nexport default TodoContainer;\nvar _c;\n$RefreshReg$(_c, \"TodoContainer\");","map":{"version":3,"names":["React","useState","useEffect","styles","Input","TodoItem","jsxDEV","_jsxDEV","TodoContainer","props","_s","tasksData","id","title","completed","tasks","setTasks","addTask","newTask","trim","alert","newTaskObj","Date","now","prevTasks","updatedTasks","sessionStorage","setItem","JSON","stringify","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","_c","$RefreshReg$"],"sources":["/Users/teo/Documents/REACT TASKS + PROJECTS/HOPE Application test/ToDo/todo-app/todo-app/src/components/TodoContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from '../styles/todo-container.module.css';\nimport Input from './Input'\nimport TodoItem from './TodoItem'\n\n\nconst TodoContainer = (props) => {\n\n  // A temporary list of tasks\n  const tasksData = [\n      {\n        id: 1,\n        title: 'Complete homework',\n        completed: false,\n      },\n      {\n        id: 2,\n        title: 'Go grocery shopping',\n        completed: false,\n      },\n      {\n        id: 3,\n        title: 'Walk the dog',\n        completed: true,\n      },\n      {\n        id: 4,\n        title: 'Read a book',\n        completed: false,\n      },\n  ];\n    \n  // Storing the state into a tasks variable to hold the initial hardcoded tasks\n  const [tasks, setTasks] = useState(tasksData); \n\n  // Function to add new task to session storage from user input\n  const addTask = (newTask) => {\n    if (newTask.trim() === '') {\n      alert('You must enter a title for the new task')\n      return; // Don't add empty tasks\n    }\n\n    const newTaskObj = {\n      id: Date.now(),\n      title: newTask,\n      completed: false,\n    };\n\n    setTasks((prevTasks) => [...prevTasks, newTaskObj]);\n\n    const updatedTasks = [...tasks, newTaskObj];\n    // Set session storage and update with the new task\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  }  \n\n  return (\n    <div className={styles.container}>\n        <Input addTask={addTask} />\n        {tasks.map((task) => (\n             <TodoItem key={task.id} title={task.title} completed={task.completed}/>\n        ))}\n    </div>\n  );\n};\n\nexport default TodoContainer;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,qCAAqC;AACxD,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,QAAQ,MAAM,YAAY;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGjC,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAE/B;EACA,MAAMC,SAAS,GAAG,CACd;IACEC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,mBAAmB;IAC1BC,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,qBAAqB;IAC5BC,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,cAAc;IACrBC,SAAS,EAAE;EACb,CAAC,EACD;IACEF,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,aAAa;IACpBC,SAAS,EAAE;EACb,CAAC,CACJ;;EAED;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACU,SAAS,CAAC;;EAE7C;EACA,MAAMM,OAAO,GAAIC,OAAO,IAAK;IAC3B,IAAIA,OAAO,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzBC,KAAK,CAAC,yCAAyC,CAAC;MAChD,OAAO,CAAC;IACV;;IAEA,MAAMC,UAAU,GAAG;MACjBT,EAAE,EAAEU,IAAI,CAACC,GAAG,CAAC,CAAC;MACdV,KAAK,EAAEK,OAAO;MACdJ,SAAS,EAAE;IACb,CAAC;IAEDE,QAAQ,CAAEQ,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEH,UAAU,CAAC,CAAC;IAEnD,MAAMI,YAAY,GAAG,CAAC,GAAGV,KAAK,EAAEM,UAAU,CAAC;IAC3C;IACAK,cAAc,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,YAAY,CAAC,CAAC;EAC/D,CAAC;EAED,oBACElB,OAAA;IAAKuB,SAAS,EAAE3B,MAAM,CAAC4B,SAAU;IAAAC,QAAA,gBAC7BzB,OAAA,CAACH,KAAK;MAACa,OAAO,EAAEA;IAAQ;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAC1BrB,KAAK,CAACsB,GAAG,CAAEC,IAAI,iBACX/B,OAAA,CAACF,QAAQ;MAAeQ,KAAK,EAAEyB,IAAI,CAACzB,KAAM;MAACC,SAAS,EAAEwB,IAAI,CAACxB;IAAU,GAAtDwB,IAAI,CAAC1B,EAAE;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgD,CAC1E,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEV,CAAC;AAAC1B,EAAA,CAzDIF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AA2DnB,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}