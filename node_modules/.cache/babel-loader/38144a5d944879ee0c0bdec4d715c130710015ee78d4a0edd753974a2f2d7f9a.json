{"ast":null,"code":"var _jsxFileName = \"/Users/teo/Documents/REACT TASKS + PROJECTS/HOPE Application test/ToDo/todo-app/todo-app/src/components/TodoContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from '../styles/todo-container.module.css';\nimport Input from './Input';\nimport TodoItem from './TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContainer = () => {\n  _s();\n  // A temporary list of tasks\n  const tasksData = [{\n    id: 1,\n    title: 'Complete homework',\n    completed: false\n  }, {\n    id: 2,\n    title: 'Go grocery shopping',\n    completed: false\n  }, {\n    id: 3,\n    title: 'Walk the dog',\n    completed: true\n  }, {\n    id: 4,\n    title: 'Read a book',\n    completed: false\n  }];\n  sessionStorage.setItem('tasks', JSON.stringify(tasksData));\n\n  // Storing the state into a tasks variable to hold the initial hardcoded tasks\n  const [tasks, setTasks] = useState(tasksData);\n  console.log(tasks);\n\n  // Function to add new task to session storage from user input\n  const addTask = newTask => {\n    if (newTask.trim() === '') {\n      alert('You must enter a title for the new task');\n      return; // Don't add empty tasks\n    }\n\n    const newTaskObj = {\n      // use timestamp as unique id\n      id: Date.now(),\n      title: newTask,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTaskObj]);\n    const updatedTasks = [...tasks, newTaskObj];\n    // Update with the new task\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  };\n\n  // Function to delete a task\n  const deleteTask = taskId => {\n    // Remove the task from session storage\n    const updatedTasks = tasks.filter(task => task.id !== taskId);\n    setTasks(updatedTasks);\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    // Update the state to trigger re-render\n  };\n\n  useEffect(() => {\n    // Fetch tasks from session storage on component mount\n    const storedTasks = JSON.parse(sessionStorage.getItem('tasks'));\n    if (storedTasks) {\n      setTasks(storedTasks);\n    }\n  }, []);\n\n  // Function to count the tasks that are not completed\n  const remainingTasks = () => {\n    return tasks.filter(task => !task.completed).length;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this), remainingTasks() > 1 ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"To be completed: \", remainingTasks(), \" tasks\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 12\n    }, this) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"To be completed: \", remainingTasks(), \" task\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(TodoItem, {\n      task: task\n      // // completed={task.completed} \n      ,\n      deleteTask: () => deleteTask(task.id)\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 14\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoContainer, \"yVArsH6noVGjl0iUq6yo9xCz2KA=\");\n_c = TodoContainer;\nexport default TodoContainer;\nvar _c;\n$RefreshReg$(_c, \"TodoContainer\");","map":{"version":3,"names":["React","useState","useEffect","styles","Input","TodoItem","jsxDEV","_jsxDEV","TodoContainer","_s","tasksData","id","title","completed","sessionStorage","setItem","JSON","stringify","tasks","setTasks","console","log","addTask","newTask","trim","alert","newTaskObj","Date","now","prevTasks","updatedTasks","deleteTask","taskId","filter","task","storedTasks","parse","getItem","remainingTasks","length","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/teo/Documents/REACT TASKS + PROJECTS/HOPE Application test/ToDo/todo-app/todo-app/src/components/TodoContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from '../styles/todo-container.module.css';\nimport Input from './Input'\nimport TodoItem from './TodoItem'\n\n\nconst TodoContainer = () => {\n  // A temporary list of tasks\n  const tasksData = [\n      {\n        id: 1,\n        title: 'Complete homework',\n        completed: false,\n      },\n      {\n        id: 2,\n        title: 'Go grocery shopping',\n        completed: false,\n      },\n      {\n        id: 3,\n        title: 'Walk the dog',\n        completed: true,\n      },\n      {\n        id: 4,\n        title: 'Read a book',\n        completed: false,\n      },\n  ];\n  sessionStorage.setItem('tasks', JSON.stringify(tasksData))\n  \n\n  // Storing the state into a tasks variable to hold the initial hardcoded tasks\n  const [tasks, setTasks] = useState(tasksData); \n  console.log(tasks)\n\n  // Function to add new task to session storage from user input\n  const addTask = (newTask) => {\n    if (newTask.trim() === '') {\n      alert('You must enter a title for the new task')\n      return; // Don't add empty tasks\n    }\n\n    const newTaskObj = {\n      // use timestamp as unique id\n      id: Date.now(),\n      title: newTask,\n      completed: false,\n    };\n\n    setTasks((prevTasks) => [...prevTasks, newTaskObj]);\n\n    const updatedTasks = [...tasks, newTaskObj];\n    // Update with the new task\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  }  \n\n  // Function to delete a task\n  const deleteTask = (taskId) => {\n    // Remove the task from session storage\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\n    setTasks(updatedTasks);\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    // Update the state to trigger re-render\n  };\n\n  useEffect(() => {\n    // Fetch tasks from session storage on component mount\n    const storedTasks = JSON.parse(sessionStorage.getItem('tasks'));\n    if (storedTasks) {\n      setTasks(storedTasks);\n    }\n  }, []);\n\n  // Function to count the tasks that are not completed\n  const remainingTasks = () => {\n    return tasks.filter((task) => !task.completed).length;\n  };\n\n  return (\n    <div className={styles.container}>\n        {/* pass functionality to the Input component  */}\n        <Input addTask={addTask} />\n        {remainingTasks() > 1 ? \n           <h2>To be completed: {remainingTasks()} tasks</h2>  : \n           <h2>To be completed: {remainingTasks()} task</h2> \n        }\n        {/* <h2>Remaining tasks to be completed: {remainingTasks()}</h2> */}\n        {tasks.map((task) => (\n             <TodoItem \n              key={task.id} \n              task={task} \n              // // completed={task.completed} \n              deleteTask={() => deleteTask(task.id)}\n              />\n        ))}\n    </div>\n  );\n};\n\nexport default TodoContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}