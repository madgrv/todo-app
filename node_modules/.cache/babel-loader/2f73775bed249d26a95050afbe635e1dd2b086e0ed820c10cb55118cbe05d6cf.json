{"ast":null,"code":"var _jsxFileName = \"/Users/teo/Documents/REACT TASKS + PROJECTS/HOPE Application test/ToDo/todo-app/todo-app/src/components/TodoContainer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styles from '../styles/todo-container.module.css';\nimport Input from './Input';\nimport TodoItem from './TodoItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoContainer = props => {\n  _s();\n  // A temporary list of tasks\n  const tasksData = [{\n    key: 1,\n    title: 'Complete homework',\n    completed: false\n  }, {\n    key: 2,\n    title: 'Go grocery shopping',\n    completed: false\n  }, {\n    key: 3,\n    title: 'Walk the dog',\n    completed: true\n  }, {\n    key: 4,\n    title: 'Read a book',\n    completed: false\n  }];\n\n  // Storing the state into a tasks variable to hold the initial hardcoded tasks\n  const [tasks, setTasks] = useState(tasksData);\n\n  // Function to add new task to session storage from user input\n  const addTask = newTask => {\n    if (newTask.trim() === '') {\n      alert('You must enter a title for the new task');\n      return; // Don't add empty tasks\n    }\n\n    const newTaskObj = {\n      id: Date.now(),\n      title: newTask,\n      completed: false\n    };\n    setTasks(prevTasks => [...prevTasks, newTaskObj]);\n    const updatedTasks = [...tasks, newTaskObj];\n    // Set session storage and update with the new task\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  };\n\n  // Function to delete a task\n  const deleteTask = taskId => {\n    // Remove the task from session storage\n    const updatedTasks = tasks.filter(task => task.id !== taskId);\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    // Update the state to trigger re-render\n    setTasks(updatedTasks);\n  };\n  useEffect(() => {\n    // Fetch tasks from session storage on component mount\n    const storedTasks = JSON.parse(sessionStorage.getItem('tasks'));\n    if (storedTasks) {\n      setTasks(storedTasks);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), tasks.map(task => /*#__PURE__*/_jsxDEV(TodoItem, {\n      title: task.title,\n      completed: task.completed,\n      deleteTask: deleteTask\n    }, task.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 14\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoContainer, \"yVArsH6noVGjl0iUq6yo9xCz2KA=\");\n_c = TodoContainer;\nexport default TodoContainer;\nvar _c;\n$RefreshReg$(_c, \"TodoContainer\");","map":{"version":3,"names":["React","useState","useEffect","styles","Input","TodoItem","jsxDEV","_jsxDEV","TodoContainer","props","_s","tasksData","key","title","completed","tasks","setTasks","addTask","newTask","trim","alert","newTaskObj","id","Date","now","prevTasks","updatedTasks","sessionStorage","setItem","JSON","stringify","deleteTask","taskId","filter","task","storedTasks","parse","getItem","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/teo/Documents/REACT TASKS + PROJECTS/HOPE Application test/ToDo/todo-app/todo-app/src/components/TodoContainer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styles from '../styles/todo-container.module.css';\nimport Input from './Input'\nimport TodoItem from './TodoItem'\n\n\nconst TodoContainer = (props) => {\n  // A temporary list of tasks\n  const tasksData = [\n      {\n        key: 1,\n        title: 'Complete homework',\n        completed: false,\n      },\n      {\n        key: 2,\n        title: 'Go grocery shopping',\n        completed: false,\n      },\n      {\n        key: 3,\n        title: 'Walk the dog',\n        completed: true,\n      },\n      {\n        key: 4,\n        title: 'Read a book',\n        completed: false,\n      },\n  ];\n    \n  // Storing the state into a tasks variable to hold the initial hardcoded tasks\n  const [tasks, setTasks] = useState(tasksData); \n\n  // Function to add new task to session storage from user input\n  const addTask = (newTask) => {\n    if (newTask.trim() === '') {\n      alert('You must enter a title for the new task')\n      return; // Don't add empty tasks\n    }\n\n    const newTaskObj = {\n      id: Date.now(),\n      title: newTask,\n      completed: false,\n    };\n\n    setTasks((prevTasks) => [...prevTasks, newTaskObj]);\n\n    const updatedTasks = [...tasks, newTaskObj];\n    // Set session storage and update with the new task\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n  }  \n\n  // Function to delete a task\n  const deleteTask = (taskId) => {\n    // Remove the task from session storage\n    const updatedTasks = tasks.filter((task) => task.id !== taskId);\n    sessionStorage.setItem('tasks', JSON.stringify(updatedTasks));\n    // Update the state to trigger re-render\n    setTasks(updatedTasks);\n  };\n\n  useEffect(() => {\n    // Fetch tasks from session storage on component mount\n    const storedTasks = JSON.parse(sessionStorage.getItem('tasks'));\n    if (storedTasks) {\n      setTasks(storedTasks);\n    }\n  }, []);\n\n  return (\n    <div className={styles.container}>\n        {/* pass functionality to the Input component  */}\n        <Input addTask={addTask} />\n        {tasks.map((task) => (\n             <TodoItem key={task.id} title={task.title} completed={task.completed} deleteTask={deleteTask}/>\n        ))}\n    </div>\n  );\n};\n\nexport default TodoContainer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}